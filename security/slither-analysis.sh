#!/bin/bash

# Slither Security Analysis Script for Gujarat LandChain
# Sprint 10: GL-1001 - Static Analysis (Slither)

set -e

echo "🔍 Starting Slither Security Analysis for Gujarat LandChain"
echo "=========================================================="

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Check if Slither is installed
if ! command -v slither &> /dev/null; then
    echo -e "${RED}❌ Slither not found. Installing...${NC}"
    pip install slither-analyzer
fi

# Create security reports directory
mkdir -p security/reports
mkdir -p security/fixes

echo -e "${BLUE}📁 Analyzing Solana Programs...${NC}"

# Analyze Solana programs
echo "Analyzing ULPIN Treasury Program..."
slither contracts/solana/programs/treasury/src/ \
    --config-file security/slither.config.json \
    --json security/reports/solana-treasury-report.json \
    --sarif security/reports/solana-treasury-report.sarif \
    --print human-summary

echo "Analyzing Bridge Program..."
slither contracts/solana/programs/bridge/src/ \
    --config-file security/slither.config.json \
    --json security/reports/solana-bridge-report.json \
    --sarif security/reports/solana-bridge-report.sarif \
    --print human-summary

echo -e "${BLUE}📁 Analyzing Ethereum Contracts...${NC}"

# Analyze Ethereum contracts
echo "Analyzing ULPIN Land Registry..."
slither contracts/ethereum/contracts/core/ULPINLandRegistry.sol \
    --config-file security/slither.config.json \
    --json security/reports/ethereum-land-registry-report.json \
    --sarif security/reports/ethereum-land-registry-report.sarif \
    --print human-summary

echo "Analyzing ULPIN Freeze Contract..."
slither contracts/ethereum/contracts/core/ULPINFreezeContract.sol \
    --config-file security/slither.config.json \
    --json security/reports/ethereum-freeze-contract-report.json \
    --sarif security/reports/ethereum-freeze-contract-report.sarif \
    --print human-summary

echo "Analyzing Cross-Chain Bridge..."
slither contracts/ethereum/contracts/bridge/ \
    --config-file security/slither.config.json \
    --json security/reports/ethereum-bridge-report.json \
    --sarif security/reports/ethereum-bridge-report.sarif \
    --print human-summary

echo -e "${BLUE}📊 Generating Security Summary...${NC}"

# Generate comprehensive security report
cat > security/reports/security-summary.md << 'EOF'
# Gujarat LandChain Security Analysis Report
## Sprint 10: GL-1001 - Static Analysis (Slither)

### Executive Summary
This report contains the results of automated static analysis using Slither for all smart contracts in the Gujarat LandChain project.

### Analysis Scope
- **Solana Programs**: Treasury and Bridge programs
- **Ethereum Contracts**: Land Registry, Freeze Contract, and Bridge contracts
- **Analysis Date**: $(date)
- **Slither Version**: $(slither --version)

### Critical Findings
- [ ] No critical vulnerabilities found
- [ ] All high-severity issues addressed
- [ ] Medium-severity issues reviewed
- [ ] Low-severity issues documented

### Recommendations
1. **Immediate Actions**: Address any critical findings
2. **Short-term**: Fix high-severity vulnerabilities
3. **Medium-term**: Review and address medium-severity issues
4. **Long-term**: Implement security best practices

### Compliance Status
- [ ] OWASP Top-10 compliance verified
- [ ] Smart contract security standards met
- [ ] Audit trail requirements satisfied
- [ ] Access control mechanisms validated

### Next Steps
1. Review all findings in detail
2. Prioritize fixes based on severity
3. Implement security improvements
4. Schedule follow-up analysis
5. Prepare for penetration testing

---
*Generated by Slither Security Analysis Script*
EOF

echo -e "${GREEN}✅ Security analysis completed!${NC}"
echo -e "${YELLOW}📋 Reports generated in security/reports/ directory${NC}"
echo -e "${BLUE}🔍 Review findings and implement fixes as needed${NC}"

# Check for critical findings
CRITICAL_COUNT=$(grep -r "CRITICAL" security/reports/ | wc -l || echo "0")
HIGH_COUNT=$(grep -r "HIGH" security/reports/ | wc -l || echo "0")

if [ "$CRITICAL_COUNT" -gt 0 ]; then
    echo -e "${RED}🚨 CRITICAL: $CRITICAL_COUNT critical findings detected!${NC}"
    exit 1
elif [ "$HIGH_COUNT" -gt 0 ]; then
    echo -e "${YELLOW}⚠️  WARNING: $HIGH_COUNT high-severity findings detected${NC}"
else
    echo -e "${GREEN}✅ No critical or high-severity findings detected${NC}"
fi

echo -e "${BLUE}📈 Security Score: $(($(($CRITICAL_COUNT * 10)) + $(($HIGH_COUNT * 5))))/100${NC}" 